
// Make a function that can only be called once per player.

// use "require".

// Require makes it so that the function will throw an error and stop executing if some condition is not true:

/*

function sayHiToVitalik(string _name) public returns (string) {
  // Compares if _name equals "Vitalik". Throws an error and exits if not true.
  // (Side note: Solidity doesn't have native string comparison, so we
  // compare their keccak256 hashes to see if the strings are equal)
  
  require(keccak256(_name) == keccak256("Vitalik"));
  // If it's true, proceed with the function:
  
  return "Hi!";

}

*/

// Require createAsset is only called once per player.

// Put a require at beginning of create function. Makes sure that the owner of the assetCount [msg.sender] is equl to 0

/* 
################################# EXERCISE ####################################
*/

pragma solidity ^0.4.19;

contract ZombieFactory {

    event NewZombie(uint zombieId, string name, uint dna);

    uint dnaDigits = 16;
    uint dnaModulus = 10 ** dnaDigits;

    struct Zombie {
        string name;
        uint dna;
    }

    Zombie[] public zombies;

    mapping (uint => address) public zombieToOwner;
    mapping (address => uint) ownerZombieCount;

    function _createZombie(string _name, uint _dna) private {
        uint id = zombies.push(Zombie(_name, _dna)) - 1;
        zombieToOwner[id] = msg.sender;
        ownerZombieCount[msg.sender]++;
        NewZombie(id, _name, _dna);
    }

    function _generateRandomDna(string _str) private view returns (uint) {
        uint rand = uint(keccak256(_str));
        return rand % dnaModulus;
    }

    function createRandomZombie(string _name) public {
        // ######## start here #################
        require(ownerZombieCount[msg.sender] == 0);
        // #########
        
        uint randDna = _generateRandomDna(_name);
        _createZombie(_name, randDna);
    }

}
